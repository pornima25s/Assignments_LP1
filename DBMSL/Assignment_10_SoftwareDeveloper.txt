Sure! Let’s dive into MongoDB queries that cover both Aggregation and Indexing concepts in detail, suitable for a software development project schema.

In this scenario, let’s assume we’re working with a projects collection that stores information about projects, team members, hours worked, budgets, and statuses. We’ll start with creating the collection, inserting sample data, and then we’ll explore ten example queries for each Aggregation and Indexing.

Step 1: Create the projects Collection and Insert Sample Data
javascript
Copy code
db.createCollection("projects")
javascript
Copy code
db.projects.insertMany([
  {
    "projectName": "Project A",
    "team": "Development",
    "budget": 20000,
    "status": "Incomplete",
    "members": [
      { "name": "Alice", "role": "Developer", "hoursWorked": 120 },
      { "name": "Bob", "role": "Tester", "hoursWorked": 80 }
    ]
  },
  {
    "projectName": "Project B",
    "team": "Development",
    "budget": 30000,
    "status": "Completed",
    "members": [
      { "name": "Charlie", "role": "Developer", "hoursWorked": 150 },
      { "name": "David", "role": "Tester", "hoursWorked": 70 }
    ]
  },
  {
    "projectName": "Project C",
    "team": "Design",
    "budget": 25000,
    "status": "Completed",
    "members": [
      { "name": "Eve", "role": "Designer", "hoursWorked": 110 },
      { "name": "Frank", "role": "Tester", "hoursWorked": 90 }
    ]
  }
]);
Part 1: Aggregation Queries
Aggregation operations in MongoDB help process and transform data by grouping, filtering, and performing various calculations on documents in a collection.

Here are 10 different queries covering key concepts in Aggregation.

1. Count the Number of Projects by Team
javascript
Copy code
db.projects.aggregate([
  { $group: { _id: "$team", projectCount: { $sum: 1 } } }
]);
2. Calculate the Total Budget by Team
javascript
Copy code
db.projects.aggregate([
  { $group: { _id: "$team", totalBudget: { $sum: "$budget" } } }
]);
3. Filter Projects by Status and Count Them
javascript
Copy code
db.projects.aggregate([
  { $match: { status: "Completed" } },
  { $count: "completedProjects" }
]);
4. Calculate Average Hours Worked by Role
javascript
Copy code
db.projects.aggregate([
  { $unwind: "$members" },
  { $group: { _id: "$members.role", averageHours: { $avg: "$members.hoursWorked" } } }
]);
5. Find Maximum and Minimum Budgets per Team
javascript
Copy code
db.projects.aggregate([
  { $group: {
      _id: "$team",
      maxBudget: { $max: "$budget" },
      minBudget: { $min: "$budget" }
    }
  }
]);
6. Sort Projects by Budget in Descending Order
javascript
Copy code
db.projects.aggregate([
  { $sort: { budget: -1 } }
]);
7. Get Top 2 Most Expensive Projects
javascript
Copy code
db.projects.aggregate([
  { $sort: { budget: -1 } },
  { $limit: 2 }
]);
8. Add a New Field for Total Hours Worked by Team Members
javascript
Copy code
db.projects.aggregate([
  { $addFields: { totalHours: { $sum: "$members.hoursWorked" } } }
]);
9. Filter and Project Specific Fields (Project Name and Status Only)
javascript
Copy code
db.projects.aggregate([
  { $project: { projectName: 1, status: 1, _id: 0 } }
]);
10. Group by Status and Calculate Total Budget and Project Count
javascript
Copy code
db.projects.aggregate([
  { $group: {
      _id: "$status",
      totalBudget: { $sum: "$budget" },
      projectCount: { $sum: 1 }
    }
  }
]);
Part 2: Indexing Queries
Indexing improves the performance of queries by optimizing how data is stored and accessed. Let’s look at different types of indexes and operations related to them.

1. Create a Single-Field Index on projectName
javascript
Copy code
db.projects.createIndex({ projectName: 1 });
2. Create a Compound Index on team and status
javascript
Copy code
db.projects.createIndex({ team: 1, status: 1 });
3. Create a Text Index on projectName for Text Search
javascript
Copy code
db.projects.createIndex({ projectName: "text" });
4. Create a Unique Index on projectName to Ensure Unique Project Names
javascript
Copy code
db.projects.createIndex({ projectName: 1 }, { unique: true });
5. Query Projects with Development Team using an Index
After creating an index, this query should be faster:

javascript
Copy code
db.projects.find({ team: "Development" });
6. Use Text Search to Find Projects Containing a Keyword
javascript
Copy code
db.projects.find({ $text: { $search: "Project A" } });
7. Create a Multikey Index on members.role
Indexes on array fields, called Multikey indexes, are useful when fields have multiple values:

javascript
Copy code
db.projects.createIndex({ "members.role": 1 });
8. Use the Explain Method to Analyze Query Performance
The explain method gives insight into how MongoDB uses indexes:

javascript
Copy code
db.projects.find({ team: "Development" }).explain("executionStats");
9. Drop an Index on projectName
If an index is no longer useful, it can be dropped:

javascript
Copy code
db.projects.dropIndex("projectName_1");
10. List All Indexes on the projects Collection
To check existing indexes on the projects collection:

javascript
Copy code
db.projects.getIndexes();
These queries cover a wide range of MongoDB's Aggregation and Indexing capabilities, optimized for handling and analyzing project-related data in a software development context.