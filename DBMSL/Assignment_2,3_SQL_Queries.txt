2. SQL Queries:

A. Design and Develop SQLDDL statements which demonstrate the use of SQL
objects such as Table, View, Index, Sequence, Synonym, different constraints
etc.
B. Write at least 10 SQL queries on the suitable database application using SQL
DML statements.
Note: Instructor will design the queries which demonstrate the use of concepts like
Insert,Select, Update, Delete with operators, functions, and set operator etc.

3. SQL Queries all types of Join, Sub-Query and View:

Write at least10 SQL queries for suitable database application using SQL DML
statements.
Note: Instructor will design the queries which demonstrate the use of concepts like all
types of Join ,Sub-Query and View
ChatGPT said:
ChatGPT
For this task, I'll provide examples for both SQL DDL and DML statements. The examples can be adapted based on the specific database you are using, and the tables or schema related to it.

2. SQL DDL and DML Queries
A. SQL DDL Statements
Create Table with Constraints:

sql
Copy code
CREATE TABLE Employee (
    EmpID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DepartmentID INT,
    Salary DECIMAL(10, 2) CHECK (Salary > 0),
    JoiningDate DATE,
    CONSTRAINT FK_Department FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);
Create a View:

sql
Copy code
CREATE VIEW HighSalaryEmployees AS
SELECT FirstName, LastName, Salary
FROM Employee
WHERE Salary > 50000;
Create Index:

sql
Copy code
CREATE INDEX idx_salary ON Employee (Salary);
Create Sequence:

sql
Copy code
CREATE SEQUENCE Emp_Seq
START WITH 1
INCREMENT BY 1;
Create Synonym:

sql
Copy code
CREATE SYNONYM Emp_Synonym FOR Employee;
B. SQL DML Statements (Insert, Select, Update, Delete)
Insert Data:

sql
Copy code
INSERT INTO Employee (EmpID, FirstName, LastName, DepartmentID, Salary, JoiningDate)
VALUES (Emp_Seq.NEXTVAL, 'John', 'Doe', 101, 60000, '2023-01-01');
Select with WHERE clause:

sql
Copy code
SELECT FirstName, LastName, Salary
FROM Employee
WHERE Salary > 50000;
Update Data:

sql
Copy code
UPDATE Employee
SET Salary = Salary + 1000
WHERE EmpID = 1;
Delete Data:

sql
Copy code
DELETE FROM Employee
WHERE EmpID = 1;
Using Set Operator (UNION):

sql
Copy code
SELECT FirstName, LastName
FROM Employee
WHERE DepartmentID = 101
UNION
SELECT FirstName, LastName
FROM Employee
WHERE DepartmentID = 102;
3. SQL Queries using Joins, Sub-Queries, and Views
Inner Join:

sql
Copy code
SELECT E.FirstName, E.LastName, D.DepartmentName
FROM Employee E
INNER JOIN Department D ON E.DepartmentID = D.DepartmentID;
Left Join:

sql
Copy code
SELECT E.FirstName, E.LastName, D.DepartmentName
FROM Employee E
LEFT JOIN Department D ON E.DepartmentID = D.DepartmentID;
Right Join:

sql
Copy code
SELECT E.FirstName, E.LastName, D.DepartmentName
FROM Employee E
RIGHT JOIN Department D ON E.DepartmentID = D.DepartmentID;
Full Outer Join:

sql
Copy code
SELECT E.FirstName, E.LastName, D.DepartmentName
FROM Employee E
FULL OUTER JOIN Department D ON E.DepartmentID = D.DepartmentID;
Cross Join:

sql
Copy code
SELECT E.FirstName, D.DepartmentName
FROM Employee E
CROSS JOIN Department D;
Sub-Query (Single Row):

sql
Copy code
SELECT FirstName, LastName, Salary
FROM Employee
WHERE Salary = (SELECT MAX(Salary) FROM Employee);
Sub-Query (Multiple Rows):

sql
Copy code
SELECT FirstName, LastName
FROM Employee
WHERE DepartmentID IN (SELECT DepartmentID FROM Department WHERE DepartmentName = 'HR');
Correlated Sub-Query:

sql
Copy code
SELECT FirstName, LastName
FROM Employee E
WHERE Salary > (SELECT AVG(Salary) FROM Employee WHERE DepartmentID = E.DepartmentID);
Create a View with Join:

sql
Copy code
CREATE VIEW EmployeeDepartmentView AS
SELECT E.FirstName, E.LastName, D.DepartmentName
FROM Employee E
JOIN Department D ON E.DepartmentID = D.DepartmentID;
Use View for Query:

sql
Copy code
SELECT *
FROM EmployeeDepartmentView
WHERE DepartmentName = 'Finance';
These queries demonstrate various SQL DDL and DML concepts, including constraints, views, sequences, joins, sub-queries, and operators, covering both parts of the task. Let me know if you'd like to adjust them based on a specific schema or add more!






