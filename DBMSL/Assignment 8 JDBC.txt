package jdbc; //should be on first line
import java.sql.*;
import java.util.Scanner;

public class jdbc {

    private static final String URL = "jdbc:mysql://localhost:3307/te31252_db";
    private static final String USER = "root"; //username
    private static final String PASSWORD = "pvs076567"; //password

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Scanner scanner = new Scanner(System.in)) {
            System.out.println("Connected to the database.");

            while (true) {
                System.out.println("\nChoose an operation:");
                System.out.println("1. Add User");
                System.out.println("2. View Users");
                System.out.println("3. Update User");
                System.out.println("4. Delete User");
                System.out.println("5. Exit");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                if (choice == 5) {
                    System.out.println("Exiting...");
                    break;
                }

                switch (choice) {
                    case 1:
                        System.out.print("Enter name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter email: ");
                        String email = scanner.nextLine();
                        String insertSQL = "INSERT INTO users (name, email) VALUES (?, ?)";
                        try (PreparedStatement pstmt = conn.prepareStatement(insertSQL)) {
                            pstmt.setString(1, name);
                            pstmt.setString(2, email);
                            pstmt.executeUpdate();
                            System.out.println("User added successfully.");
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        break;

                    case 2:
                        String selectSQL = "SELECT * FROM users";
                        try (Statement stmt = conn.createStatement();
                             ResultSet rs = stmt.executeQuery(selectSQL)) {
                            System.out.println("Users:");
                            while (rs.next()) {
                                System.out.println(rs.getInt("id") + ": " + rs.getString("name") + " (" + rs.getString("email") + ")");
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        break;

                    case 3:
                        System.out.print("Enter user ID to update: ");
                        int idToUpdate = scanner.nextInt();
                        scanner.nextLine();
                        System.out.print("Enter new name: ");
                        String newName = scanner.nextLine();
                        System.out.print("Enter new email: ");
                        String newEmail = scanner.nextLine();
                        String updateSQL = "UPDATE users SET name = ?, email = ? WHERE id = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(updateSQL)) {
                            pstmt.setString(1, newName);
                            pstmt.setString(2, newEmail);
                            pstmt.setInt(3, idToUpdate);
                            int rowsAffected = pstmt.executeUpdate();
                            System.out.println(rowsAffected > 0 ? "User updated successfully." : "User not found.");
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        break;

                    case 4:
                        System.out.print("Enter user ID to delete: ");
                        int idToDelete = scanner.nextInt();
                        String deleteSQL = "DELETE FROM users WHERE id = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(deleteSQL)) {
                            pstmt.setInt(1, idToDelete);
                            int rowsAffected = pstmt.executeUpdate();
                            System.out.println(rowsAffected > 0 ? "User deleted successfully." : "User not found.");
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        break;

                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}













mysql> create Table users (id int auto_increment primary key, name varchar(20), email varchar(20));
Query OK, 0 rows affected (0.03 sec)

mysql> select * from users;
+----+---------+---------------+
| id | name    | email         |
+----+---------+---------------+
|  1 | Pornima | p25@gmail.com |
+----+---------+---------------+
1 row in set (0.00 sec)

mysql> select * from users;
+----+---------+------------------+
| id | name    | email            |
+----+---------+------------------+
|  1 | Pornima | p25@gmail.com    |
|  2 | Rutuja  | rutu19@gmail.com |
+----+---------+------------------+
2 rows in set (0.00 sec)

mysql> select * from users;
+----+---------+---------------+
| id | name    | email         |
+----+---------+---------------+
|  1 | Pornima | p25@gmail.com |
|  2 | Dhanu   | dpp@gmail.com |
+----+---------+---------------+
2 rows in set (0.00 sec)

mysql>






















The Java code you've provided consists of two main classes, DbConproj and DatabaseNavigation, that interact with a MySQL database. Below are some theoretical concepts related to the code:

1. Database Connectivity in Java
JDBC (Java Database Connectivity): JDBC is an API that allows Java applications to interact with databases. It provides methods to connect to a database, send SQL statements, and retrieve results.
DriverManager: This class manages a list of database drivers. It establishes a connection to a database using a connection URL, username, and password.
2. SQL Operations
CRUD Operations: The code demonstrates basic CRUD operations—Create (insert), Read (select), Update, and Delete—using SQL statements.
Insert: Adding a new record to the database.
Select: Retrieving records from the database.
Update: Modifying existing records.
Delete: Removing records from the database.
Prepared Statements: The DatabaseNavigation class uses PreparedStatement, which is more secure against SQL injection attacks and often more efficient than using Statement for executing queries.
3. Error Handling
Try-Catch-Finally: The code implements error handling using try-catch blocks to catch exceptions that may occur during database operations. The finally block ensures that resources like connections and statements are closed properly, preventing memory leaks.
4. Object-Oriented Programming (OOP) Principles
Encapsulation: The methods in both classes encapsulate the logic for interacting with the database. This promotes code reusability and separation of concerns.
Abstraction: The implementation details of the database operations are hidden from the user. They only interact with high-level methods like addStudent and viewStudents.
5. User Interaction
Scanner Class: The Scanner class is used for capturing user input from the console. It allows users to perform operations interactively.
6. Best Practices
Resource Management: Using try-with-resources for automatically closing database connections and statements, which helps manage resources efficiently.
Parameterized Queries: Using parameterized queries with PreparedStatement to prevent SQL injection, ensuring the application is more secure.
7. Data Model
Database Schema: The code interacts with two different databases (sakila and student_db), implying a database schema with tables like con1 and student. Understanding the structure of these tables (columns, types, relationships) is crucial for effective database interaction.
8. Concurrency and Transactions (Advanced)
In a multi-user environment, managing concurrent access to the database is essential. Java provides transaction management capabilities to ensure data integrity during concurrent updates.
Conclusion
The provided Java classes are practical examples of how to perform database operations using JDBC, focusing on basic CRUD functionality and user interaction. Understanding these underlying theories can help in enhancing database applications and ensuring best practices are followed in software development.



