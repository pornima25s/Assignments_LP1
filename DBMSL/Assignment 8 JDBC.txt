import java.sql.*;

public class DbConproj {
    
    public static void main(String[] args) {
        DbConproj dbConproj = new DbConproj();
        dbConproj.selectData();
        dbConproj.insertData(3);
        dbConproj.updateData(2, "abc");
        dbConproj.deleteData(3);
    }

    // Method to select data from the table
    public void selectData() {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/sakila",
                "root", "system");

            statement = connection.createStatement();
            resultSet = statement.executeQuery("select * from con1");

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                System.out.println("id : " + id);
            }
        } catch (Exception exception) {
            System.out.println(exception);
        } finally {
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }

    // Method to insert data into the table
    public void insertData(int id) {
        Connection connection = null;
        Statement statement = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/sakila",
                "root", "system");

            statement = connection.createStatement();
            int rowsAffected = statement.executeUpdate(
                "INSERT INTO con1 VALUES (" + id + ")");

            System.out.println("Inserted " + rowsAffected + " row(s).");
        } catch (Exception exception) {
            System.out.println(exception);
        } finally {
            try {
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }

    // Method to update data in the table
    public void updateData(int id, String name) {
        Connection connection = null;
        Statement statement = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/sakila",
                "root", "system");

            statement = connection.createStatement();
            int rowsAffected = statement.executeUpdate(
                "UPDATE con1 SET name='" + name + "' WHERE id=" + id);

            System.out.println("Updated " + rowsAffected + " row(s).");
        } catch (Exception exception) {
            System.out.println(exception);
        } finally {
            try {
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }

    // Method to delete data from the table
    public void deleteData(int id) {
        Connection connection = null;
        Statement statement = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/sakila",
                "root", "system");

            statement = connection.createStatement();
            int rowsAffected = statement.executeUpdate(
                "DELETE FROM con1 WHERE id=" + id);

            System.out.println("Deleted " + rowsAffected + " row(s).");
        } catch (Exception exception) {
            System.out.println(exception);
        } finally {
            try {
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }
}




































import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class DatabaseNavigation {

    private static final String URL = "jdbc:mysql://localhost:3306/student_db";
    private static final String USER = "root"; // MySQL username
    private static final String PASSWORD = ""; // MySQL password

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            Scanner sc = new Scanner(System.in);
            boolean exit = false;
            while (!exit) {
                System.out.println("Choose Operation: 1. Add Student, 2. Edit Student, 3. Delete Student, 4. View Students, 5. Exit");
                int choice = sc.nextInt();
                switch (choice) {
                    case 1:
                        addStudent(conn, sc);
                        break;
                    case 2:
                        editStudent(conn, sc);
                        break;
                    case 3:
                        deleteStudent(conn, sc);
                        break;
                    case 4:
                        viewStudents(conn);
                        break;
                    case 5:
                        exit = true;
                        break;
                    default:
                        System.out.println("Invalid choice!");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Add student to the database
    public static void addStudent(Connection conn, Scanner sc) throws SQLException {
        System.out.println("Enter student name: ");
        String name = sc.next();
        System.out.println("Enter total marks: ");
        int marks = sc.nextInt();

        String sql = "INSERT INTO student (name, total_marks) VALUES (?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, name);
            stmt.setInt(2, marks);
            int rowsInserted = stmt.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Student added successfully.");
            }
        }
    }

    // Edit student details in the database
    public static void editStudent(Connection conn, Scanner sc) throws SQLException {
        System.out.println("Enter student ID to edit: ");
        int id = sc.nextInt();
        System.out.println("Enter new name: ");
        String name = sc.next();
        System.out.println("Enter new total marks: ");
        int marks = sc.nextInt();

        String sql = "UPDATE student SET name = ?, total_marks = ? WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, name);
            stmt.setInt(2, marks);
            stmt.setInt(3, id);
            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated > 0) {
                System.out.println("Student updated successfully.");
            } else {
                System.out.println("Student not found.");
            }
        }
    }

    // Delete student from the database
    public static void deleteStudent(Connection conn, Scanner sc) throws SQLException {
        System.out.println("Enter student ID to delete: ");
        int id = sc.nextInt();

        String sql = "DELETE FROM student WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            int rowsDeleted = stmt.executeUpdate();
            if (rowsDeleted > 0) {
                System.out.println("Student deleted successfully.");
            } else {
                System.out.println("Student not found.");
            }
        }
    }

    // View all students in the database
    public static void viewStudents(Connection conn) throws SQLException {
        String sql = "SELECT * FROM student";
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            System.out.println("ID\tName\tTotal Marks");
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int marks = rs.getInt("total_marks");
                System.out.println(id + "\t" + name + "\t" + marks);
            }
        }
    }
}











































The Java code you've provided consists of two main classes, DbConproj and DatabaseNavigation, that interact with a MySQL database. Below are some theoretical concepts related to the code:

1. Database Connectivity in Java
JDBC (Java Database Connectivity): JDBC is an API that allows Java applications to interact with databases. It provides methods to connect to a database, send SQL statements, and retrieve results.
DriverManager: This class manages a list of database drivers. It establishes a connection to a database using a connection URL, username, and password.
2. SQL Operations
CRUD Operations: The code demonstrates basic CRUD operations—Create (insert), Read (select), Update, and Delete—using SQL statements.
Insert: Adding a new record to the database.
Select: Retrieving records from the database.
Update: Modifying existing records.
Delete: Removing records from the database.
Prepared Statements: The DatabaseNavigation class uses PreparedStatement, which is more secure against SQL injection attacks and often more efficient than using Statement for executing queries.
3. Error Handling
Try-Catch-Finally: The code implements error handling using try-catch blocks to catch exceptions that may occur during database operations. The finally block ensures that resources like connections and statements are closed properly, preventing memory leaks.
4. Object-Oriented Programming (OOP) Principles
Encapsulation: The methods in both classes encapsulate the logic for interacting with the database. This promotes code reusability and separation of concerns.
Abstraction: The implementation details of the database operations are hidden from the user. They only interact with high-level methods like addStudent and viewStudents.
5. User Interaction
Scanner Class: The Scanner class is used for capturing user input from the console. It allows users to perform operations interactively.
6. Best Practices
Resource Management: Using try-with-resources for automatically closing database connections and statements, which helps manage resources efficiently.
Parameterized Queries: Using parameterized queries with PreparedStatement to prevent SQL injection, ensuring the application is more secure.
7. Data Model
Database Schema: The code interacts with two different databases (sakila and student_db), implying a database schema with tables like con1 and student. Understanding the structure of these tables (columns, types, relationships) is crucial for effective database interaction.
8. Concurrency and Transactions (Advanced)
In a multi-user environment, managing concurrent access to the database is essential. Java provides transaction management capabilities to ensure data integrity during concurrent updates.
Conclusion
The provided Java classes are practical examples of how to perform database operations using JDBC, focusing on basic CRUD functionality and user interaction. Understanding these underlying theories can help in enhancing database applications and ensuring best practices are followed in software development.



